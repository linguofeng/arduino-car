package com.linguofeng.arduinocar;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.bluetooth.BluetoothSocket;import android.os.Bundle;import android.app.Activity;import android.util.Log;import android.view.Menu;import android.view.MotionEvent;import android.view.View;import android.widget.Button;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.Set;import java.util.UUID;public class MainActivity extends Activity {    private Button mH, mJ, mK, mL;    private BluetoothAdapter mBluetoothAdapter;    private BluetoothDevice mmDevice;    private ConnectThread mCommectThread;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        mH = (Button) findViewById(R.id.h);        mH.setTag("H");        mJ = (Button) findViewById(R.id.j);        mJ.setTag("J");        mK = (Button) findViewById(R.id.k);        mK.setTag("K");        mL = (Button) findViewById(R.id.l);        mL.setTag("L");        View.OnTouchListener listener = new View.OnTouchListener() {            @Override            public boolean onTouch(View view, MotionEvent motionEvent) {                switch (motionEvent.getAction()) {                    case MotionEvent.ACTION_DOWN:                        Log.d("MainAction", "down.............");                        if (mCommectThread != null) {                            mCommectThread.write(view.getTag().toString().getBytes());                        }                        break;                    case MotionEvent.ACTION_UP:                        Log.d("MainAction", "up.............");                        if (mCommectThread != null) {                            mCommectThread.write("X".getBytes());                        }                        break;                }                return false;            }        };        mH.setOnTouchListener(listener);        mJ.setOnTouchListener(listener);        mK.setOnTouchListener(listener);        mL.setOnTouchListener(listener);        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();        Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();        if (pairedDevices.size() > 0) {            // Loop through paired devices            for (BluetoothDevice device : pairedDevices) {                if (device.getName().equals("linvor")) {                    mmDevice = device;                    break;                }            }        }        if (mmDevice != null) {            mCommectThread = new ConnectThread(mmDevice);            mCommectThread.start();        }    }    private void h() {    }    @Override    public void finish() {        super.finish();        if (mCommectThread != null) {            mCommectThread.cancel();        }    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.main, menu);        return true;    }    private class ConnectThread extends Thread {        private final BluetoothSocket mmSocket;        private final BluetoothDevice mmDevice;        private InputStream mmInStream;        private OutputStream mmOutStream;        public ConnectThread(BluetoothDevice device) {            BluetoothSocket tmp = null;            mmDevice = device;            try {                tmp = device.createRfcommSocketToServiceRecord(UUID.fromString("00001101-0000-1000-8000-00805f9b34fb"));            } catch (IOException e) { }            mmSocket = tmp;        }        public void run() {            mBluetoothAdapter.cancelDiscovery();            try {                mmSocket.connect();            } catch (IOException connectException) {                try {                    mmSocket.close();                } catch (IOException closeException) { }                return;            }            try {                mmInStream = mmSocket.getInputStream();                mmOutStream = mmSocket.getOutputStream();            } catch (IOException e) { }            byte[] buffer = new byte[1024];  // buffer store for the stream            int bytes; // bytes returned from read()            while (true) {                try {                    bytes = mmInStream.read(buffer);                    Log.d("MainActivity", new String(buffer, 0, bytes) + "---------------");                } catch (IOException e) {                    break;                }            }        }        public void write(byte[] bytes) {            try {                mmOutStream.write(bytes);            } catch (IOException e) { }        }        public void cancel() {            try {                mmSocket.close();            } catch (IOException e) { }        }    }}